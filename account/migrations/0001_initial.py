# Generated by Django 3.1 on 2022-06-14 22:39

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(db_index=True, default='blank', max_length=15)),
                ('last_name', models.CharField(db_index=True, default='blank', max_length=15)),
                ('username', models.CharField(db_index=True, max_length=15, unique=True)),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('password', models.CharField(max_length=500)),
                ('upd_time', models.DateTimeField(auto_now=True)),
                ('en_lvl', models.CharField(choices=[('0', 'Pre-A1 Beginner'), ('1', 'A1 Elementary'), ('2', 'A2 Pre-Intermediate'), ('3', 'B1 Intermediate'), ('4', 'B2 Upper-Intermediate'), ('5', 'C1 Advanced'), ('6', 'C2 Proficiency'), ('7', 'Undefined')], default='7', max_length=1)),
                ('group', models.CharField(max_length=10)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
